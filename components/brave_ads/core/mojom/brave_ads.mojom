/* Copyright (c) 2019 The Brave Authors. All rights reserved.
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at https://mozilla.org/MPL/2.0/. */
module brave_ads.mojom;

import "mojo/public/mojom/base/time.mojom";
import "url/mojom/url.mojom";

struct SysInfo {
  string device_id;
};

struct BuildChannelInfo {
  bool is_release;
  string name;
};

enum EnvironmentType {
  kStaging = 0,
  kProduction
};

struct Flags {
  bool should_debug;
  bool did_override_from_command_line;
  EnvironmentType environment_type;
};

struct WalletInfo {
  string payment_id;
  string recovery_seed;
};

struct StatementInfo {
  double min_earnings_last_month;
  double max_earnings_last_month;
  double min_earnings_this_month;
  double max_earnings_this_month;
  mojo_base.mojom.Time next_payment_date;
  int32 ads_received_this_month;
  map<string, int32> ads_summary_this_month;
};

enum ReminderType {
  kClickedSameAdMultipleTimes = 0,
  kExternalWalletConnected
};

[Stable, Extensible]
enum ReactionType {
  [Default] kNeutral = 0,
  kLiked = 1,
  kDisliked = 2
};

struct ReactionInfo {
  AdType type;
  string creative_instance_id;
  string creative_set_id;
  string advertiser_id;
  string segment;
};

// These values must match `public/ad_units/ad_type.h`.
enum AdType {
  kUndefined = 0,
  kNotificationAd,
  kNewTabPageAd,
  kPromotedContentAd,
  kInlineContentAd,
  kSearchResultAd
};

struct CreativeSetConversionInfo {
  string url_pattern;
  string? verifiable_advertiser_public_key_base64;
  mojo_base.mojom.TimeDelta observation_window;
};

enum NotificationAdEventType {
  kServedImpression = 0,
  kViewedImpression,
  kClicked,
  kDismissed,
  kTimedOut
};

enum NewTabPageAdEventType {
  kServedImpression = 0,
  kViewedImpression,
  kClicked,
  kMediaPlay,
  kMedia25,
  kMedia100
};

enum PromotedContentAdEventType {
  kServedImpression = 0,
  kViewedImpression,
  kClicked
};

enum InlineContentAdEventType {
  kServedImpression = 0,
  kViewedImpression,
  kClicked
};

struct CreativeSearchResultAdInfo {
  AdType type = kSearchResultAd;
  string placement_id;
  string creative_instance_id;
  string creative_set_id;
  string campaign_id;
  string advertiser_id;
  url.mojom.Url target_url;
  string headline_text;
  string description;
  double value;
  CreativeSetConversionInfo? creative_set_conversion;
};

enum SearchResultAdEventType {
  kServedImpression = 0,
  kViewedImpression,
  kClicked
};

enum UrlRequestMethodType {
  kGet = 0,
  kPut,
  kPost
};

struct UrlRequestInfo {
  url.mojom.Url url;
  array<string> headers;
  string content;
  string content_type;
  UrlRequestMethodType method;
};

struct UrlResponseInfo {
  url.mojom.Url url;
  int32 status_code = -1;
  string body;
  map<string, string> headers;
};

struct DBTransactionInfo {
  int32 version;
  int32 compatible_version;
  array<DBStatementInfo> statements;
};


enum DBBindColumnType {
  kInt,
  kInt64,
  kDouble,
  kBool,
  kString
};

union DBColumnValueUnion {
  int32 int_value;
  int64 int64_value;
  double double_value;
  bool bool_value;
  string string_value;
};

struct DBBindColumnInfo {
  int32 index;
  DBColumnValueUnion value_union;
};

struct DBRowInfo {
  array<DBColumnValueUnion> column_values_union;
};

union DBRowsUnion {
  array<DBRowInfo> rows;
  DBColumnValueUnion column_value_union;
};

struct DBStatementInfo {
  enum OperationType {
    // Create or open the database.
    kCreateOrOpen,

    // Execute a statement with bound columns that return records.
    kStep,

    // Execute a statement with bound columns that does not return records.
    kRun,

    // Execute a statement that does not return records.
    kExecute,

    // Migrate the database to the latest version.
    kMigrate,

    // Vacuum the database after committing the transaction.
    kVacuum
  };

  OperationType operation_type;
  string sql;
  array<DBBindColumnType> bind_column_types;
  array<DBBindColumnInfo> bind_columns;
};

struct DBStatementResultInfo {
  enum ResultCode {
    kSuccess,  // No error.
    kUninitialized,
    kFailedToInitializeMetaTable,
    kFailedToOpenDatabase,
    kMigrationError,
    kTransactionError,
    kStatementError
  };

  DBRowsUnion? rows_union;
  ResultCode result_code;
};

// Silences presubmit on mojom check. This struct does not need to be [Stable].
struct DBCommandResponseInfo {};
